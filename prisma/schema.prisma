// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WorkLocation {
  id         Int      @id @default(autoincrement())
  content    String   @unique
  posts      Post     @relation(fields: [post_id], references: [post_id])
  post_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model TimeWorking {
  id         Int      @id @default(autoincrement())
  content    String   @unique
  posts      Post     @relation(fields: [post_id], references: [post_id])
  post_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model SalaryInformation {
  salary_information_id Int      @id @default(autoincrement())
  content               String   @unique
  posts                 Post     @relation(fields: [post_id], references: [post_id])
  post_id               Int
  created_at            DateTime @default(now())
  updated_at            DateTime @default(now())
}

model Comment {
  comment_id Int      @id @default(autoincrement())
  content    String
  post       Post     @relation(fields: [post_id], references: [post_id])
  post_id    Int
  user       User     @relation(fields: [user_id], references: [user_id])
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Hashtag {
  hashtag_id     Int              @id @default(autoincrement())
  postAndHashtag PostAndHashtag[]
  content        String
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
}

model Post {
  post_id            Int                 @id @default(autoincrement())
  description        String
  job_name           String
  job_requirement    String              @default("")
  quantity           Int                 @default(1)
  status             StatusPost          @default(OPEN)
  time_working       TimeWorking[]
  salary_information SalaryInformation[]
  work_locations     WorkLocation[]
  comments           Comment[]
  postAndHashtag     PostAndHashtag[]
  user               User                @relation(fields: [user_id], references: [user_id])
  user_id            Int
  created_at         DateTime            @default(now())
  updated_at         DateTime            @default(now())
}

enum StatusPost {
  OPEN
  CLOSE
}

model PostAndHashtag {
  post       Post    @relation(fields: [post_id], references: [post_id])
  post_id    Int
  hashtag    Hashtag @relation(fields: [hashtag_id], references: [hashtag_id])
  hashtag_id Int
  @@id([post_id, hashtag_id])
}

model User {
  user_id        Int             @id @default(autoincrement())
  profile        Profile?
  account        Account?
  comments       Comment[]
  posts          Post[]
  reviews        Review[]
  comment_review CommentReview[]
  notification   Notification[]
  created_at     DateTime        @default(now())
  updated_at     DateTime        @default(now())
}

model Account {
  account_id Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [user_id])
  user_id    Int      @unique
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Contact {
  contact_id Int      @id @default(autoincrement())
  profile    Profile  @relation(fields: [profile_id], references: [user_id])
  profile_id Int      @unique
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Profile {
  profile_id Int         @id @default(autoincrement())
  user       User        @relation(fields: [user_id], references: [user_id])
  user_id    Int         @unique
  permission Permission  @default(STUDENT)
  username   String
  full_name  String
  contacts   Contact[]
  avatar     String      @default("")
  student    Student?
  enterprise Enterprise?
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
}

enum Permission {
  STUDENT
  ENTERPRISE
}

model Student {
  student_id              Int      @id @default(autoincrement())
  infomation_of_education String   @default("")
  address                 String   @default("")
  profile                 Profile  @relation(fields: [profile_id], references: [user_id])
  profile_id              Int      @unique
  created_at              DateTime @default(now())
  updated_at              DateTime @default(now())
}

model Enterprise {
  enterprise_id      Int      @id @default(autoincrement())
  career_path        String   @default("")
  enterprise_name    String   @default("")
  enterprise_address String   @default("")
  profile            Profile  @relation(fields: [profile_id], references: [user_id])
  profile_id         Int      @unique
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now())
}

model Review {
  review_id  Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [user_id])
  user_id    Int      @unique
  content    String
  star       Star
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum Star {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

model CommentReview {
  comment_review_id Int      @id @default(autoincrement())
  user              User     @relation(fields: [user_id], references: [user_id])
  user_id           Int      @unique
  content           String
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
}

model Notification {
  notification_id Int              @id @default(autoincrement())
  user            User             @relation(fields: [user_id], references: [user_id])
  user_id         Int              @unique
  content         String
  from            NotificationFrom
  created_at      DateTime         @default(now())
  updated_at      DateTime         @default(now())
}

enum NotificationFrom {
  COMMENT
  POST
  REVIEW
  COMMENT_REVIEW
}
