// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WorkLocation {
  work_location_id         Int                        @id @default(autoincrement())
  content                  String
  posts                    Posts                      @relation(fields: [post_id], references: [post_id])
  post_id                  Int
  workLocationsAndHashtags WorkLocationsAndHashtags[]
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @default(now())
}

model TimeWorking {
  time_working_id         Int                       @id @default(autoincrement())
  content                 String
  posts                   Posts                     @relation(fields: [post_id], references: [post_id])
  post_id                 Int
  timesWorkingAndHashtags TimesWorkingAndHashtags[]
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @default(now())
}

model SalaryInformation {
  salary_information_id Int      @id @default(autoincrement())
  content               String
  posts                 Posts    @relation(fields: [post_id], references: [post_id])
  post_id               Int
  created_at            DateTime @default(now())
  updated_at            DateTime @default(now())
}

model Comment {
  comment_id Int      @id @default(autoincrement())
  content    String
  post       Posts    @relation(fields: [post_id], references: [post_id])
  post_id    Int
  user       User     @relation(fields: [user_id], references: [user_id])
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Hashtag {
  hashtag_id               Int                        @id @default(autoincrement())
  postsAndHashtags         PostAndHashtag[]
  workLocationsAndHashtags WorkLocationsAndHashtags[]
  timesWorkingAndHashtags  TimesWorkingAndHashtags[]
  content                  String                     @unique
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @default(now())
}

model Posts {
  post_id            Int                 @id @default(autoincrement())
  description        String
  job_name           String
  job_requirement    String              @default("")
  quantity           Int                 @default(1)
  status             StatusPost          @default(OPEN)
  time_working       TimeWorking[]
  salary_information SalaryInformation[]
  work_locations     WorkLocation[]
  comments           Comment[]
  postAndHashtag     PostAndHashtag[]
  user               User                @relation(fields: [user_id], references: [user_id])
  notifications      Notification[]
  user_id            Int
  created_at         DateTime            @default(now())
  updated_at         DateTime            @default(now())
}

enum StatusPost {
  OPEN
  CLOSE
}

model PostAndHashtag {
  post       Posts   @relation(fields: [post_id], references: [post_id])
  post_id    Int
  hashtag    Hashtag @relation(fields: [hashtag_id], references: [hashtag_id])
  hashtag_id Int

  @@id([post_id, hashtag_id])
}

model WorkLocationsAndHashtags {
  work_location    WorkLocation @relation(fields: [work_location_id], references: [work_location_id])
  work_location_id Int
  hashtag          Hashtag      @relation(fields: [hashtag_id], references: [hashtag_id])
  hashtag_id       Int

  @@id([work_location_id, hashtag_id])
}

model TimesWorkingAndHashtags {
  time_working    TimeWorking @relation(fields: [time_working_id], references: [time_working_id])
  time_working_id Int
  hashtag         Hashtag     @relation(fields: [hashtag_id], references: [hashtag_id])
  hashtag_id      Int

  @@id([time_working_id, hashtag_id])
}

model User {
  user_id             Int                     @id @default(autoincrement())
  profile             Profile?
  account             Account?
  comments            Comment[]
  posts               Posts[]
  reviews             Review[]
  comment_review      CommentReview[]
  userAndNotification UsersAndNotifications[]
  created_at          DateTime                @default(now())
  updated_at          DateTime                @default(now())
}

model Account {
  account_id Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [user_id])
  user_id    Int      @unique
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Contact {
  contact_id Int      @id @default(autoincrement())
  profile    Profile  @relation(fields: [profile_id], references: [user_id])
  profile_id Int      @unique
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Profile {
  profile_id Int         @id @default(autoincrement())
  user       User        @relation(fields: [user_id], references: [user_id])
  user_id    Int         @unique
  permission Permission  @default(STUDENT)
  username   String
  full_name  String      @default("")
  contacts   Contact[]
  avatar     String      @default("")
  student    Student?
  enterprise Enterprise?
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
}

enum Permission {
  STUDENT
  ENTERPRISE
}

model Student {
  student_id              Int      @id @default(autoincrement())
  infomation_of_education String   @default("")
  address                 String   @default("")
  profile                 Profile  @relation(fields: [profile_id], references: [user_id])
  profile_id              Int      @unique
  created_at              DateTime @default(now())
  updated_at              DateTime @default(now())
}

model Enterprise {
  enterprise_id      Int      @id @default(autoincrement())
  career_path        String   @default("")
  enterprise_name    String   @default("")
  enterprise_address String   @default("")
  profile            Profile  @relation(fields: [profile_id], references: [user_id])
  profile_id         Int      @unique
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now())
}

model Review {
  review_id     Int            @id @default(autoincrement())
  user          User           @relation(fields: [user_id], references: [user_id])
  user_id       Int            @unique
  content       String
  star          Star           @default(THREE)
  notifications Notification[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now())
}

enum Star {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

model CommentReview {
  comment_review_id Int      @id @default(autoincrement())
  user              User     @relation(fields: [user_id], references: [user_id])
  user_id           Int      @unique
  content           String
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
}

model Notification {
  notification_id       Int                     @id @default(autoincrement())
  user_and_notification UsersAndNotifications[]
  content               String
  from                  NotificationFrom
  post                  Posts?                  @relation(fields: [post_id], references: [post_id])
  post_id               Int?
  review                Review?                 @relation(fields: [review_id], references: [review_id])
  review_id             Int?
  isRead                Boolean                 @default(false)
  created_at            DateTime                @default(now())
  updated_at            DateTime                @default(now())
}

enum NotificationFrom {
  POST
  REVIEW
  // COMMENT
  // COMMENT_REVIEW
}

model UsersAndNotifications {
  user            User         @relation(fields: [user_id], references: [user_id])
  user_id         Int
  notification    Notification @relation(fields: [notification_id], references: [notification_id])
  notification_id Int

  @@id([user_id, notification_id])
}
